

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."help_type_enum" AS ENUM (
    'limpieza',
    'alojamiento',
    'evacuacion',
    'distribucion',
    'rescate',
    'medica',
    'psicologico',
    'logistico',
    'otros'
);


ALTER TYPE "public"."help_type_enum" OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."collection_points" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "name" "text",
    "type" "text",
    "location" "text",
    "city" "text",
    "contact_name" "text",
    "contact_phone" "text",
    "accepted_items" "text"[],
    "urgent_needs" "text",
    "status" "text" DEFAULT 'active'::"text",
    "coordinates" "point"
);


ALTER TABLE "public"."collection_points" OWNER TO "postgres";


COMMENT ON TABLE "public"."collection_points" IS 'Tabla de puntos de recogida - Todos los campos son opcionales excepto id';



ALTER TABLE "public"."collection_points" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."collection_points_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."delivery_points" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "location" "text" NOT NULL,
    "city" "text" NOT NULL,
    "contact_name" "text",
    "contact_phone" "text",
    "contact_email" "text",
    "schedule" "text",
    "vehicle_type" "text",
    "cargo_type" "text",
    "additional_info" "text",
    "status" "text" DEFAULT 'active'::"text",
    "user_id" "uuid",
    "latitude" numeric(10,8),
    "longitude" numeric(11,8),
    "coordinates" "point" GENERATED ALWAYS AS ("point"(("longitude")::double precision, ("latitude")::double precision)) STORED
);


ALTER TABLE "public"."delivery_points" OWNER TO "postgres";


COMMENT ON COLUMN "public"."delivery_points"."latitude" IS 'Geographic latitude coordinate';



COMMENT ON COLUMN "public"."delivery_points"."longitude" IS 'Geographic longitude coordinate';



COMMENT ON COLUMN "public"."delivery_points"."coordinates" IS 'PostgreSQL point type generated from lat/long';



CREATE TABLE IF NOT EXISTS "public"."help_requests" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "type" "text",
    "name" "text",
    "location" "text",
    "description" "text",
    "urgency" "text",
    "number_of_people" integer,
    "contact_info" "text",
    "additional_info" "jsonb",
    "status" "text" DEFAULT 'active'::"text",
    "resources" "jsonb",
    "latitude" numeric(10,8),
    "longitude" numeric(11,8),
    "coordinates" "point" GENERATED ALWAYS AS ("point"(("longitude")::double precision, ("latitude")::double precision)) STORED,
    "help_type" "public"."help_type_enum"[] DEFAULT '{}'::"public"."help_type_enum"[],
    "people_needed" integer DEFAULT 1,
    "town_id" bigint
);


ALTER TABLE "public"."help_requests" OWNER TO "postgres";


COMMENT ON TABLE "public"."help_requests" IS 'Tabla de solicitudes de ayuda - Todos los campos son opcionales excepto id';



COMMENT ON COLUMN "public"."help_requests"."town_id" IS 'ID del pueblo de la tabla "towns"';



ALTER TABLE "public"."help_requests" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."help_requests_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."missing_persons" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()),
    "name" "text",
    "age" integer,
    "gender" "text",
    "height" integer,
    "description" "text",
    "last_seen_location" "text",
    "last_seen_date" timestamp with time zone,
    "reporter_name" "text",
    "reporter_contact" "text",
    "status" "text" DEFAULT 'active'::"text",
    "medical_conditions" "text",
    "clothing_description" "text",
    "additional_info" "jsonb",
    "reporter_relationship" "text",
    "secondary_contact" "text",
    "coordinates" "point"
);


ALTER TABLE "public"."missing_persons" OWNER TO "postgres";


COMMENT ON TABLE "public"."missing_persons" IS 'Tabla de personas desaparecidas - Todos los campos son opcionales excepto id';



ALTER TABLE "public"."missing_persons" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."missing_persons_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."towns" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text",
    "people_helping" integer DEFAULT 0,
    "help_needed" integer DEFAULT 0
);


ALTER TABLE "public"."towns" OWNER TO "postgres";


ALTER TABLE "public"."towns" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."towns_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."collection_points"
    ADD CONSTRAINT "collection_points_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."delivery_points"
    ADD CONSTRAINT "delivery_points_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."help_requests"
    ADD CONSTRAINT "help_requests_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."missing_persons"
    ADD CONSTRAINT "missing_persons_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."towns"
    ADD CONSTRAINT "towns_pkey" PRIMARY KEY ("id");



CREATE INDEX "idx_collection_points_coordinates" ON "public"."collection_points" USING "gist" ("coordinates");



CREATE INDEX "idx_delivery_points_coordinates" ON "public"."delivery_points" USING "gist" ("coordinates");



CREATE INDEX "idx_help_requests_resources" ON "public"."help_requests" USING "gin" ("resources");



CREATE INDEX "idx_help_requests_status" ON "public"."help_requests" USING "btree" ("status");



CREATE INDEX "idx_help_requests_type" ON "public"."help_requests" USING "btree" ("type");



CREATE INDEX "idx_missing_persons_coordinates" ON "public"."missing_persons" USING "gist" ("coordinates");



CREATE INDEX "idx_missing_persons_created_at" ON "public"."missing_persons" USING "btree" ("created_at");



CREATE INDEX "idx_missing_persons_status" ON "public"."missing_persons" USING "btree" ("status");



ALTER TABLE ONLY "public"."delivery_points"
    ADD CONSTRAINT "delivery_points_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."help_requests"
    ADD CONSTRAINT "help_requests_town_id_fkey" FOREIGN KEY ("town_id") REFERENCES "public"."towns"("id");



CREATE POLICY "Enable insert access" ON "public"."collection_points" FOR INSERT WITH CHECK (true);



CREATE POLICY "Enable insert access" ON "public"."help_requests" FOR INSERT WITH CHECK (true);



CREATE POLICY "Enable insert access" ON "public"."missing_persons" FOR INSERT WITH CHECK (true);



CREATE POLICY "Enable insert access for authenticated users" ON "public"."delivery_points" FOR INSERT WITH CHECK (("auth"."role"() = 'authenticated'::"text"));



CREATE POLICY "Enable insert for all users" ON "public"."delivery_points" FOR INSERT WITH CHECK (true);



CREATE POLICY "Enable insert for all users" ON "public"."help_requests" FOR INSERT WITH CHECK (true);



CREATE POLICY "Enable insert for anonymous users" ON "public"."help_requests" FOR INSERT WITH CHECK (true);



CREATE POLICY "Enable read access" ON "public"."collection_points" FOR SELECT USING (true);



CREATE POLICY "Enable read access" ON "public"."missing_persons" FOR SELECT USING (true);



CREATE POLICY "Enable read access" ON "public"."towns" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."delivery_points" FOR SELECT USING (true);



CREATE POLICY "Enable read access for anonymous users" ON "public"."help_requests" FOR SELECT USING (true);



CREATE POLICY "Enable select for all users" ON "public"."help_requests" FOR SELECT USING (true);



CREATE POLICY "Enable update for authenticated users" ON "public"."delivery_points" FOR UPDATE USING (("auth"."role"() = 'authenticated'::"text"));



ALTER TABLE "public"."collection_points" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."delivery_points" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."help_requests" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."missing_persons" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."towns" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";



































































































































































































GRANT ALL ON TABLE "public"."collection_points" TO "anon";
GRANT ALL ON TABLE "public"."collection_points" TO "authenticated";
GRANT ALL ON TABLE "public"."collection_points" TO "service_role";



GRANT ALL ON SEQUENCE "public"."collection_points_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."collection_points_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."collection_points_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."delivery_points" TO "anon";
GRANT ALL ON TABLE "public"."delivery_points" TO "authenticated";
GRANT ALL ON TABLE "public"."delivery_points" TO "service_role";



GRANT ALL ON TABLE "public"."help_requests" TO "anon";
GRANT ALL ON TABLE "public"."help_requests" TO "authenticated";
GRANT ALL ON TABLE "public"."help_requests" TO "service_role";



GRANT ALL ON SEQUENCE "public"."help_requests_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."help_requests_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."help_requests_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."missing_persons" TO "anon";
GRANT ALL ON TABLE "public"."missing_persons" TO "authenticated";
GRANT ALL ON TABLE "public"."missing_persons" TO "service_role";



GRANT ALL ON SEQUENCE "public"."missing_persons_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."missing_persons_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."missing_persons_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."towns" TO "anon";
GRANT ALL ON TABLE "public"."towns" TO "authenticated";
GRANT ALL ON TABLE "public"."towns" TO "service_role";



GRANT ALL ON SEQUENCE "public"."towns_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."towns_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."towns_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
